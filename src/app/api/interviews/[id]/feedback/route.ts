import { NextRequest, NextResponse } from 'next/server';
import Interview from '@/models/Interview';
import Feedback from '@/models/Feedback';
import connectDB from '@/lib/db';
// 1. Import the GoogleGenAI class
import { GoogleGenAI } from '@google/genai'; 

// 2. Initialize GoogleGenAI
// Assumes GEMINI_API_KEY is set in your environment
const gemini = new GoogleGenAI({ 
    apiKey: process.env.GEMINI_API_KEY!,
});

export async function POST(
    request: NextRequest,
    { params }: { params: { id: string } }
) {
    try {
        await connectDB();
        
        const { candidateId, transcripts } = await request.json();

        // Validate incoming data
        if (!candidateId || !transcripts || !Array.isArray(transcripts)) {
            return NextResponse.json({ error: "Missing or invalid candidateId or transcripts" }, { status: 400 });
        }
        
        // Find the interview using the UUID in the `interviewLink` field
        const interview = await Interview.findOne({ 
            interviewLink: new RegExp(params.id, "i") 
        });
        
        if (!interview) {
            return NextResponse.json(
                { error: 'Interview not found' },
                { status: 404 }
            );
        }
        
        // 1. Update interview with transcripts and mark as completed
        interview.transcripts = transcripts;
        interview.status = 'completed';
        interview.candidateId = candidateId;
        
        // 2. Generate feedback using Gemini
        const feedbackContent = await generateFeedback(interview);
        
        // 3. Create and save the new Feedback document
        const newFeedback = new Feedback({
            interviewId: interview._id,
            candidateId: interview.candidateId,
            jobTitle: interview.jobTitle,
            feedbackContent: feedbackContent,
        });
        await newFeedback.save();

        // 4. Link the new feedback document back to the interview
        interview.feedbackId = newFeedback._id;
        
        // 5. Save the updated interview document with the new feedback link
        await interview.save();
        
        return NextResponse.json({
            success: true,
            feedback: feedbackContent
        });

    } catch (error: any) {
        console.error('Error saving feedback:', error);
        return NextResponse.json(
            { error: 'Failed to save feedback', details: error.message },
            { status: 500 }
        );
    }
}

/**
 * Generates feedback for the interview using Gemini Chat Completion.
 * @param interview The interview document containing the transcript and job details.
 * @returns The generated feedback text as a string.
 */
async function generateFeedback(interview: any): Promise<string> {
    try {
        const systemInstruction = "You are an expert HR professional and interview coach. Provide constructive, professional, and actionable feedback that helps candidates improve their interview skills. Be specific and reference the actual conversation from the transcript.";
        
        const userPrompt = `
            Analyze this interview transcript and provide constructive feedback for the candidate.

            Job Title: ${interview.jobTitle}
            Job Description: ${interview.jobDescription}
            Difficulty Level: ${interview.difficulty}
            
            Interview Transcript:
            ${interview.transcripts.map((t: any) => `${t.role}: ${t.content}`).join('\n')}
            
            Please provide the following in a structured format with clear headings:
            1. Overall Summary: A brief, high-level assessment of the candidate's performance.
            2. Key Strengths: 2-3 bullet points highlighting what the candidate did well.
            3. Areas for Improvement: 2-3 specific, actionable areas where the candidate could improve.
            4. Detailed Analysis: Go through a few key questions and suggest how the answers could have been stronger.
            5. Final Recommendation: A concluding thought on the candidate's suitability for the next steps.
            
            Format the response in clean, professional markdown with clear section headers.
        `;

        // 3. Use gemini.models.generateContent
        const response = await gemini.models.generateContent({
            // ⭐️ FIX: Changed to the recommended stable alias to fix the 404 error
            model: "gemini-2.5-flash", 
            contents: userPrompt,
            config: {
                // System Instruction is passed in the config object
                systemInstruction: systemInstruction,
                temperature: 0.7,
                maxOutputTokens: 1500,
            }
        });

        const feedback = response.text;
        
        if (!feedback) {
            throw new Error('No feedback generated by Gemini');
        }

        return feedback;

    } catch (error) {
        console.error('Error generating feedback with Gemini:', error);
        // Fallback error message remains the same
        return `# Interview Feedback\n\n## Overall Summary\nFeedback generation is currently unavailable. Please review the transcript manually.\n\n## Transcript Review Needed\nThe AI feedback system is temporarily unavailable. Please analyze the interview transcript above to provide manual feedback to the candidate.`;
    }
}